apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: pullrequest
spec:
  pipelineSpec:
    tasks:
    - name: from-build-pack
      resources: {}
      taskSpec:
        metadata: {}
        volumes:
          - name: ssh-key
            secret:
              secretName: pipeline-autodeploy-key
              defaultMode: 0400
        stepTemplate:
          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/nop/pullrequest.yaml@versionStream
          env:
          - name: SONARQUBE_USER
            valueFrom:
              secretKeyRef:
                name: pyhlml-creds
                key: SONARQUBE_USER
          - name: SONARQUBE_PASS
            valueFrom:
              secretKeyRef:
                name: pyhlml-creds
                key: SONARQUBE_PASS
          - name: ARTIFACTORY_PYPI_USER
            valueFrom:
              secretKeyRef:
                name: pyhlml-creds
                key: ARTIFACTORY_PYPI_USER
          - name: ARTIFACTORY_PYPI_PASS
            valueFrom:
              secretKeyRef:
                name: pyhlml-creds
                key: ARTIFACTORY_PYPI_PASS
          name: ""
          resources: {}
          workingDir: /workspace/source
        steps:
        - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone-pr.yaml@versionStream
          name: ""
          resources: {}
        - name: jx-variables
          resources: {}
        ### BEGIN CUSTOM STEP
        - name: pyhlml-codescan-step
          image: docker.io/lamatriz/blueprint:scripts_latest
          imagePullPolicy: Always
          resources: {}
          script: |
            #!/bin/bash
            echo "10.0.199.23 utils-sonarqube" >> /etc/hosts
            echo "code scanning"
            sonar-scanner -Dproject.settings=sonar.properties -Dsonar.login=${SONARQUBE_PASS} -Dsonar.host.url=http://utils-sonarqube
        - name: pyhlml-build-step
          image: docker.io/lamatriz/blueprint:scripts_latest
          imagePullPolicy: Always
          resources: {}
          script: |
            #!/bin/bash
            echo "poetry repo config"
            poetry config repositories.genart http://10.3.162.8/artifactory/api/pypi/devpypi
            echo "poetry build & publish"
            poetry publish -r genart --username ${ARTIFACTORY_PYPI_USER} --password ${ARTIFACTORY_PYPI_PASS} --build
        - name: pyhlml-test-step
          volumeMounts:
            - name: ssh-key
              readOnly: true
              mountPath: /root/.ssh
          image: ubuntu:20.04
          resources: {}
          script: |
            #!/bin/bash
            apt-get update &> .update.log && apt-get -y install openssh-client rsync git &> .install.log
            ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@10.0.199.61 /bin/bash << EOF
                sudo pip3 uninstall -y pyhlml
                sudo pip3 install pyhlml --index http://${ARTIFACTORY_PYPI_USER}:${ARTIFACTORY_PYPI_PASS}@genart/artifactory/api/pypi/devpypi-local/simple --trusted-host genart
                cat >pyhlml-test-new.py << EOL
                import pyhlml
                # Initialize the library
                pyhlml.hlmlInit()
                # Get total number of devices in the system
                device_count = pyhlml.hlmlDeviceGetCount()
                # For each device print utilization
                for i in range(device_count):
                  device = pyhlml.hlmlDeviceGetHandleByIndex(i)
                  print(f"Device {i} Utilization: {pyhlml.hlmlDeviceGetUtilizationRates(device)}")
                # Shutdown
                pyhlml.hlmlShutdown()
                EOL
                cat pyhlml-test-new.py
                echo "-------------------"
                echo "test execution"
                echo "-------------------"
                python3 pyhlml-test.py
                EOF
        ### END CUSTOM STEP
  podTemplate: {}
  serviceAccountName: tekton-bot
  timeout: 12h0m0s
status: {}
